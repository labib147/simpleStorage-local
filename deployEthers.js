// sync solidity
// async javascript
/*
Sync - promise
*/
// Promise can be : Pending, Fulfilled, Rejected

const ethers = require("ethers");
const fs = require("fs-extra");

async function main() {
  // http://127.0.0.1:7545
  const provider = new ethers.providers.JsonRpcProvider(
    "http://127.0.0.1:7545"
  );
  const wallet = new ethers.Wallet(
    "0af40c46f324c143eb2afab577eff105fcc0133acff18e10519e4f0844978c9b",
    provider
  );
  const abi = fs.readFileSync("./SimpleStorage_sol_simpleStorage.abi", "utf-8");
  const binary = fs.readFileSync(
    "./SimpleStorage_sol_simpleStorage.bin",
    "utf-8"
  );

  /* pass ABI so our code knows how to interact with the contract 
  Pass Binary because its the main compiled code
  Pass wallet so we have a private key we can use to sign deploying this contract  
  */

  // THIS NEEDS TO BE USED FOR DEPLOYMENT AND CONNECTING TO THE CONTRACT
  // const contractFactory = new ethers.ContractFactory(abi, binary, wallet); // In ethers a Contract Factory is an object that you can use to deploy contracts
  // console.log("Deploying, please wait...");
  // const contract = await contractFactory.deploy();
  // const transactionReceipt = await contract.deployTransaction.wait(1); // You only get a transaction receipt when you wait for a block confirmation

  /*
  await can only be used in an async function, STOP and wait for contract deployment
  await keyword resolves a promise
  So contractFactory.deploy() returns a promise that returns a contract
  we are awaiting for it to finish resolving to deploy a contract
  */

  console.log("Let's deploy with only transaction data");
  const nonce = await wallet.getTransactionCount();
  const tx = {
    nonce: nonce, // n-th transaction
    gasPrice: 20000000000,
    gasLimit: 1000000,
    to: null,
    value: 0,
    data: "0x608060405260016000806101000a81548160ff0219169083151502179055506101006001556040518060400160405280600381526020017f5369780000000000000000000000000000000000000000000000000000000000815250600290816200006a919062000396565b507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff960035573f39fd6e51aad88f6f4ce6ab8827279cfffb92266600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f63617400000000000000000000000000000000000000000000000000000000006005553480156200011557600080fd5b506200047d565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200019e57607f821691505b602082108103620001b457620001b362000156565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200021e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620001df565b6200022a8683620001df565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000277620002716200026b8462000242565b6200024c565b62000242565b9050919050565b6000819050919050565b620002938362000256565b620002ab620002a2826200027e565b848454620001ec565b825550505050565b600090565b620002c2620002b3565b620002cf81848462000288565b505050565b5b81811015620002f757620002eb600082620002b8565b600181019050620002d5565b5050565b601f82111562000346576200031081620001ba565b6200031b84620001cf565b810160208510156200032b578190505b620003436200033a85620001cf565b830182620002d4565b50505b505050565b600082821c905092915050565b60006200036b600019846008026200034b565b1980831691505092915050565b600062000386838362000358565b9150826002028217905092915050565b620003a1826200011c565b67ffffffffffffffff811115620003bd57620003bc62000127565b5b620003c9825462000185565b620003d6828285620002fb565b600060209050601f8311600181146200040e5760008415620003f9578287015190505b62000405858262000378565b86555062000475565b601f1984166200041e86620001ba565b60005b82811015620004485784890151825560018201915060208501945060208101905062000421565b8683101562000468578489015162000464601f89168262000358565b8355505b6001600288020188555050505b505050505050565b6109a1806200048d6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306c62c2c146100675780632e64cec1146100975780636057361d146100b557806366a69824146100d15780636f760f4114610101578063f304146e1461011d575b600080fd5b610081600480360381019061007c9190610459565b61014e565b60405161008e91906104bb565b60405180910390f35b61009f61017c565b6040516100ac91906104bb565b60405180910390f35b6100cf60048036038101906100ca9190610502565b610186565b005b6100eb60048036038101906100e69190610502565b610190565b6040516100f891906104bb565b60405180910390f35b61011b6004803603810190610116919061052f565b6101b4565b005b61013760048036038101906101329190610502565b610243565b60405161014592919061060a565b60405180910390f35b6007818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6000600654905090565b8060068190555050565b600881815481106101a057600080fd5b906000526020600020016000915090505481565b600060405180604001604052808481526020018381525090506009819080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001908161020e9190610846565b506020820151816001015550508160078460405161022c9190610954565b908152602001604051809103902081905550505050565b6009818154811061025357600080fd5b906000526020600020906002020160009150905080600001805461027690610669565b80601f01602080910402602001604051908101604052809291908181526020018280546102a290610669565b80156102ef5780601f106102c4576101008083540402835291602001916102ef565b820191906000526020600020905b8154815290600101906020018083116102d257829003601f168201915b5050505050908060010154905082565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103668261031d565b810181811067ffffffffffffffff821117156103855761038461032e565b5b80604052505050565b60006103986102ff565b90506103a4828261035d565b919050565b600067ffffffffffffffff8211156103c4576103c361032e565b5b6103cd8261031d565b9050602081019050919050565b82818337600083830152505050565b60006103fc6103f7846103a9565b61038e565b90508281526020810184848401111561041857610417610318565b5b6104238482856103da565b509392505050565b600082601f8301126104405761043f610313565b5b81356104508482602086016103e9565b91505092915050565b60006020828403121561046f5761046e610309565b5b600082013567ffffffffffffffff81111561048d5761048c61030e565b5b6104998482850161042b565b91505092915050565b6000819050919050565b6104b5816104a2565b82525050565b60006020820190506104d060008301846104ac565b92915050565b6104df816104a2565b81146104ea57600080fd5b50565b6000813590506104fc816104d6565b92915050565b60006020828403121561051857610517610309565b5b6000610526848285016104ed565b91505092915050565b6000806040838503121561054657610545610309565b5b600083013567ffffffffffffffff8111156105645761056361030e565b5b6105708582860161042b565b9250506020610581858286016104ed565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156105c55780820151818401526020810190506105aa565b60008484015250505050565b60006105dc8261058b565b6105e68185610596565b93506105f68185602086016105a7565b6105ff8161031d565b840191505092915050565b6000604082019050818103600083015261062481856105d1565b905061063360208301846104ac565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061068157607f821691505b6020821081036106945761069361063a565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026106fc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826106bf565b61070686836106bf565b95508019841693508086168417925050509392505050565b6000819050919050565b600061074361073e610739846104a2565b61071e565b6104a2565b9050919050565b6000819050919050565b61075d83610728565b6107716107698261074a565b8484546106cc565b825550505050565b600090565b610786610779565b610791818484610754565b505050565b5b818110156107b5576107aa60008261077e565b600181019050610797565b5050565b601f8211156107fa576107cb8161069a565b6107d4846106af565b810160208510156107e3578190505b6107f76107ef856106af565b830182610796565b50505b505050565b600082821c905092915050565b600061081d600019846008026107ff565b1980831691505092915050565b6000610836838361080c565b9150826002028217905092915050565b61084f8261058b565b67ffffffffffffffff8111156108685761086761032e565b5b6108728254610669565b61087d8282856107b9565b600060209050601f8311600181146108b0576000841561089e578287015190505b6108a8858261082a565b865550610910565b601f1984166108be8661069a565b60005b828110156108e6578489015182556001820191506020850194506020810190506108c1565b8683101561090357848901516108ff601f89168261080c565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b600061092e8261058b565b6109388185610918565b93506109488185602086016105a7565b80840191505092915050565b60006109608284610923565b91508190509291505056fea26469706673582212205a3b6837f92bc0ce478953a502d962a126125d1cbbb0de009ae1bbb66fce215264736f6c63430008110033",
    chainId: 1337,
  };

  //// const signedTx = await this.signTransaction(tx);
  //// return await this.provider.sendTransaction(signedTx); Even in ethers.js before sending transaction it sends transaction.

  //// for send transaction
  const sentTxResponse = await wallet.sendTransaction(tx);
  await sentTxResponse.wait(1);
  console.log(sentTxResponse);

  // const signedTxResponse = await wallet.signTransaction(tx); // ONLY FOR SIGNING TRANSACTIONS NOT SENDING
  // console.log(signedTxResponse);

  //console.log("Here is the deployment transaction (transaction response): ");
  // console.log(contract.deployTransaction);
  // console.log("Here is the transaction receipt: ");
  // console.log(transactionReceipt);

  // console.log(contract);     // If we don't add await, the contract is console logged before even deploying
}
// console.log("het");
// let = 5;
// console.log(let);

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
